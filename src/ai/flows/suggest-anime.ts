
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting anime based on a list of liked anime.
 *
 * - suggestAnime - A function that takes a list of liked anime and suggests new anime with a description, rating, confidence score, reason, seasons, episode length, and tags.
 * - SuggestAnimeInput - The input type for the suggestAnime function.
 * - SuggestAnimeOutput - The return type for the suggestAnime function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestAnimeInputSchema = z.object({
  likedAnime: z
    .array(z.string())
    .describe('A list of anime titles that the user likes.'),
});
export type SuggestAnimeInput = z.infer<typeof SuggestAnimeInputSchema>;

const SuggestAnimeOutputSchema = z.object({
  suggestions: z.array(
    z.object({
      title: z.string().describe('The title of the suggested anime.'),
      description: z.string().describe('A brief description of the anime.'),
      rating: z.number().describe('The rating of the anime (e.g., out of 10).'),
      confidence: z
        .number()
        .describe(
          'The confidence score (as a percentage) that the user will like the suggested anime.'
        ),
      reason: z
        .string()
        .describe(
          'A brief reason (1-2 sentences) explaining why this anime is a good suggestion based on the user\'s liked anime.'
        ),
      seasons: z.string().optional().describe('Number of seasons (e.g., "3 seasons", "Movie", "Ongoing").'),
      episodeLength: z.string().optional().describe('Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).'),
      tags: z.array(z.string()).optional().describe('A list of 3-5 descriptive tags for the anime (e.g., genre, themes like "Shonen", "Mecha", "Slice of Life", "Dark Fantasy").'),
    })
  ),
});
export type SuggestAnimeOutput = z.infer<typeof SuggestAnimeOutputSchema>;

export async function suggestAnime(input: SuggestAnimeInput): Promise<SuggestAnimeOutput> {
  return suggestAnimeFlow(input);
}

const estimateConfidence = ai.defineTool({
    name: 'estimateConfidence',
    description: 'Estimates the likelihood that a user will enjoy an anime based on their preferences.',
    inputSchema: z.object({
        animeDescription: z.string().describe('Description of the anime to estimate the user liking.'),
        userPreferences: z.array(z.string()).describe('List of user liked anime.'),
    }),
    outputSchema: z.number().describe('The confidence score (as a percentage) that the user will like the suggested anime.'),
    async implementation(input) {
        // TODO: add implementation here to return the confidence percentage.
        // Replace this with a proper calculation based on the anime description and user preferences.
        return Math.floor(Math.random() * 51) + 50; // Random confidence between 50-100
    }
});

const suggestAnimePrompt = ai.definePrompt({
  name: 'suggestAnimePrompt',
  input: {schema: SuggestAnimeInputSchema},
  output: {schema: SuggestAnimeOutputSchema},
  tools: [estimateConfidence],
  prompt: `You are an AI anime expert. You will suggest new anime to the user based on the animes that the user likes. You must also use the estimateConfidence tool to estimate the user liking towards the suggested anime.

  Suggest 3 animes. For each anime, include:
  1. Title
  2. Description (1-2 sentences)
  3. Rating (out of 10, can be a float)
  4. Likelihood that the user will enjoy it (confidence percentage), using the estimateConfidence tool.
  5. A brief reason (1-2 sentences) explaining why this anime is a good suggestion based on the user's liked anime.
  6. Seasons: Information about seasons (e.g., "3 seasons", "Movie", "Ongoing", "1 season, 12 episodes").
  7. Episode Length: Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).
  8. Tags: A list of 3-5 descriptive tags (e.g., genre, themes like 'Shonen', 'Mecha', 'Slice of Life', 'Dark Fantasy').

  User's Liked Anime: {{likedAnime}}
  `,
});

const suggestAnimeFlow = ai.defineFlow(
  {
    name: 'suggestAnimeFlow',
    inputSchema: SuggestAnimeInputSchema,
    outputSchema: SuggestAnimeOutputSchema,
  },
  async input => {
    const {output} = await suggestAnimePrompt(input);
    return output!;
  }
);
