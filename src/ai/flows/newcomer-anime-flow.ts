
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting beginner-friendly anime based on user's taste.
 *
 * - suggestNewcomerAnime - A function that takes a taste description and suggests anime for newcomers.
 * - NewcomerAnimeInput - The input type for the suggestNewcomerAnime function.
 * - NewcomerAnimeOutput - The return type for the suggestNewcomerAnime function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const NewcomerAnimeInputSchema = z.object({
  tasteDescription: z
    .string()
    .describe('A description of genres or types of shows/movies the user generally enjoys, to help suggest beginner-friendly anime.'),
});
export type NewcomerAnimeInput = z.infer<typeof NewcomerAnimeInputSchema>;

// Define the output schema directly in this file, matching SuggestAnimeOutputSchema structure
const SuggestAnimeOutputSchema = z.object({
  suggestions: z.array(
    z.object({
      title: z.string().describe('The title of the suggested anime.'),
      description: z.string().describe('A brief description of the anime.'),
      rating: z.number().describe('The rating of the anime (e.g., out of 10).'),
      confidence: z
        .number()
        .describe(
          'The confidence score (as a percentage) that the user will like the suggested anime.'
        ),
      reason: z
        .string()
        .describe(
          'A brief reason (1-2 sentences) explaining why this anime is a good suggestion based on the user\'s liked anime or tastes.'
        ),
      seasons: z.string().optional().describe('Number of seasons (e.g., "3 seasons", "Movie", "Ongoing").'),
      episodeLength: z.string().optional().describe('Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).'),
      tags: z.array(z.string()).optional().describe('A list of 3-5 descriptive tags for the anime (e.g., genre, themes like "Shonen", "Slice of Life", "Comedy").'),
    })
  ),
});
export type NewcomerAnimeOutput = z.infer<typeof SuggestAnimeOutputSchema>;


export async function suggestNewcomerAnime(input: NewcomerAnimeInput): Promise<NewcomerAnimeOutput> {
  return newcomerAnimeFlow(input);
}

const newcomerAnimePrompt = ai.definePrompt({
  name: 'newcomerAnimePrompt',
  input: {schema: NewcomerAnimeInputSchema},
  output: {schema: SuggestAnimeOutputSchema},
  prompt: `You are an AI anime expert specializing in recommending anime to people new to the medium. Based on the user's taste in other shows/movies, suggest 3 beginner-friendly anime. For each anime, include:
  1. Title
  2. Description (1-2 sentences)
  3. Rating (out of 10, can be a float)
  4. Confidence: Your confidence (as a percentage) that a newcomer with these tastes will enjoy this anime and find it accessible.
  5. Reason: Explain (1-2 sentences) why this anime is a good starting point for a newcomer AND how it relates to their stated tastes.
  6. Seasons: Information about seasons (e.g., "3 seasons", "Movie", "Ongoing", "1 season, 12 episodes").
  7. Episode Length: Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).
  8. Tags: A list of 3-5 descriptive tags (e.g., genre, themes like 'Shonen', 'Slice of Life', 'Comedy').

  User's Taste: {{tasteDescription}}
  `,
});

const newcomerAnimeFlow = ai.defineFlow(
  {
    name: 'newcomerAnimeFlow',
    inputSchema: NewcomerAnimeInputSchema,
    outputSchema: SuggestAnimeOutputSchema,
  },
  async input => {
    const {output} = await newcomerAnimePrompt(input);
    return output!;
  }
);
