
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting an "Anime of the Day".
 *
 * - getAnimeOfTheDay - A function that returns a single anime suggestion for the day.
 * - AnimeOfTheDayOutput - The return type for the getAnimeOfTheDay function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnimeOfTheDayInputSchema = z.object({
  currentDate: z.string().describe('The current date in YYYY-MM-DD format, to ensure the Anime of the Day is consistent for that specific day.'),
});

const AnimeOfTheDayOutputSchema = z.object({
  title: z.string().describe('The title of the suggested anime.'),
  description: z.string().describe('A brief description of the anime.'),
  rating: z.number().describe('The rating of the anime (e.g., out of 10).'),
  confidence: z
    .number()
    .describe(
      'The curator\'s confidence score (as a percentage) that this is an excellent and noteworthy pick for Anime of the Day.'
    ),
  reason: z
    .string()
    .describe(
      'A compelling 1-2 sentence reason explaining why this anime is chosen as the "Anime of the Day" for today, {{currentDate}}.'
    ),
  seasons: z.string().optional().describe('Number of seasons (e.g., "3 seasons", "Movie", "Ongoing").'),
  episodeLength: z.string().optional().describe('Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).'),
  tags: z.array(z.string()).optional().describe('A list of 3-5 descriptive tags for the anime (e.g., genre, themes).'),
});
export type AnimeOfTheDayOutput = z.infer<typeof AnimeOfTheDayOutputSchema>;

export async function getAnimeOfTheDay(): Promise<AnimeOfTheDayOutput> {
  // Generate the current date in YYYY-MM-DD format
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
  const day = String(today.getDate()).padStart(2, '0');
  const currentDateString = `${year}-${month}-${day}`;

  return animeOfTheDayFlow({ currentDate: currentDateString });
}

const animeOfTheDayPrompt = ai.definePrompt({
  name: 'animeOfTheDayPrompt',
  input: {schema: AnimeOfTheDayInputSchema},
  output: {schema: AnimeOfTheDayOutputSchema},
  prompt: `You are an AI curator with a deep knowledge of anime. Your task is to select and present one "Anime of the Day" specifically for the date: {{currentDate}}.
  This anime should be noteworthy, critically acclaimed, a hidden gem, or particularly relevant for today.
  Ensure that for the given date ({{currentDate}}), your choice remains consistent if asked multiple times today.
  Provide the following details for the Anime of the Day:
  1. Title
  2. Description: A captivating 1-2 sentence summary.
  3. Rating: An estimated rating out of 10 (can be a float).
  4. Confidence: Your confidence (as a percentage) that this is an excellent and interesting pick for Anime of the Day.
  5. Reason: A compelling 1-2 sentence explanation of why this specific anime is chosen as the "Anime of the Day" for {{currentDate}}. Highlight what makes it special.
  6. Seasons: Information about seasons (e.g., "3 seasons", "Movie", "Ongoing", "1 season, 12 episodes").
  7. Episode Length: Typical episode length (e.g., "24 min per episode", "1h 30min total" for a movie).
  8. Tags: A list of 3-5 descriptive tags (e.g., genre, themes like 'Sci-Fi', 'Coming-of-Age', 'Masterpiece').
  `,
});

const animeOfTheDayFlow = ai.defineFlow(
  {
    name: 'animeOfTheDayFlow',
    inputSchema: AnimeOfTheDayInputSchema, // Expects currentDate
    outputSchema: AnimeOfTheDayOutputSchema,
  },
  async (input) => { // input here will be { currentDate: "YYYY-MM-DD" }
    const {output} = await animeOfTheDayPrompt(input);
    return output!;
  }
);

